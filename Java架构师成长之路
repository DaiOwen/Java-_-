# 分布式全局ID、分布式事务和数据一致性

情境：分库分表后，引发了ID重复问题、分布式事务的问题。本次我们主要讨论分布式全局ID的解决方案以及多种分布式事务的解决方案。

### 1、分布式全局ID

（1）、①UUID、 ②MyCat的全局id（本地文件和数据库）、③分布式ID（雪花算法Snowflake）。

（2）、https://www.cnblogs.com/Tiancheng-Duan/p/10962704.html 参考文档

### 2、分布式事务

（1）、CAP原理 ACID原理与BASE原理

# 接口幂等性

# 分布式限流

###  1、概要

​      在大数据高并发访问时，经常会出现**服务**或**接口**面对暴涨的请求而出现不可用的情况，甚至引发连锁反应导致整个系统不可用，此时需要的技术技术手段就是限流，当请求达到一定的并发数或者速率，就进行等待、排队、降级、拒绝服务等，在限流时，常见的算法有**令牌桶（Token Bucket）算法**、**漏桶（leaky bucket）**和**计数器算法**。

### 2、分布式限流的几种维度

 		**时间** 限流基于某段时间范围或者某个时间点，也就是我们常说的”时间窗口“，比如对每分钟、每秒钟的时间窗口做限定。

​        **资源** 基于可用资源的限制，比如最大访问次数，或最高连接数。

综合上述两个维度看，**限流就是在某个时间窗口对资源的访问做限制**，例如设订每秒最多有100个访问请求。

### 3、设置限流规则

​    在真正的场景中，我们不止设置一种限流规则，而是会设置多种限流规则同时使用，主要的限流规则如下：

![image-20200821114416434](C:\Users\daihuhu\AppData\Roaming\Typora\typora-user-images\image-20200821114416434.png)

#### （1）、QPS和连接数控制

​		针对连接数和QPS（query per second）限流来说，我们可以设定IP维度的限流，也可以设置基于单个服务器的限流。在真实环境来说，我们通常会设定一个IP每秒的访问频率小于10，连接数小于5，再设定每台机器的QPS最高1000，连接数最大保持200。更进一步，我们可以把某个服务器或整个机房的服务器当做一个整体，设置high-level的限流规则，这些限流规则都会共同作用于流量控制。

#### （2）、传输速率

​        针对“传输速率”，我们经常可以从“百度云盘”上看到玄机，设置的规则就是普通用户100k/s，购买会员后是10M/s，背后是基于用户组或者用户标签的限流逻辑。

#### （3）、黑白名单

​         黑白名单是个大企业惯用的限流和放行政策，而且黑名单往往是动态变化的。例如一个IP在某段是时间内访问过于频繁，被系统识别为机器人攻击或者流量攻击，那么这个IP就会被列入黑名单，从而限制其对系统字图案的访问，俗称“封IP”

​       白名单是相对于黑名单来说的，相当于御赐金牌在手，可以在各种限流规则中畅行无阻。例如某些电商公司会将超大卖家的账号加入白名单，因为这类卖家往往有自已的一套运维系统，需要对接公司的IT系统做大量的商品发布、补货等操作。

### 4、分布式环境

​       所谓分布式限流，道理其实很简单，分布式相对于单机限流的场景，把整个分布式环境中所有服务器当做一个整体考量，比如对IP限流，我们限制这个IP每秒的访问量不多于10个，不管这个IP的请求落到了哪台机器上，只要是访问了集群中的服务节点，那么都会受到限流的制约。

​       从上述的例子我们也可以看出，我们必须将限流信息保存在一个“中心化”的组件上，这样它就可以获取集群中的所有机器访问状态，目前比较主流的连个限流方案：

**网关层限流** 将限流规则应用在所有流量的入口处

**中间件限流** 将限流信息存储在分布式环境中某个中间件（比如Redis缓存），每个组件都可以从这里获取到当前时刻的流量统计，从而决定是拒绝服务还是放行流量。
